<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Messy Zhu</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mrmessy77.github.io/"/>
  <updated>2018-09-02T13:16:08.485Z</updated>
  <id>https://mrmessy77.github.io/</id>
  
  <author>
    <name>Messy Zhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IPFS节点搭建</title>
    <link href="https://mrmessy77.github.io/2018/08/28/IPFS%E8%8A%82%E7%82%B9%E6%90%AD%E5%BB%BA/"/>
    <id>https://mrmessy77.github.io/2018/08/28/IPFS节点搭建/</id>
    <published>2018-08-28T06:48:19.000Z</published>
    <updated>2018-09-02T13:16:08.485Z</updated>
    
    <content type="html"><![CDATA[<p>###IPFS介绍<br>IPFS的英文全称是InterPlanetary File System，中文名叫星际文件系统。IPFS是一个分布式的存储系统，你可以将各式各样的文件存储到IPFS网络中。至于IPFS与HTTP之间的比较，本文不在此说明，大家可以到百度上搜索，这里将着重讲解如何在本地搭建一个IPFS节点。</p>
<p>###IPFS节点<br>ipfs节点存在于ipfs网络中，分布在全球的各个地方，主要用户上传文件到ipfs网络中，或者从ipfs网络中下载文件。可以看到下面的图片，蓝色的线头代表了一个个的ipfs节点，这些节点在全球的任意地方都有可能出现。<br><img src="https://upload-images.jianshu.io/upload_images/764896-b99a47c0299d768b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ipfs网络节点分布图.png"></p>
<p>###IPFS节点部署</p>
<p>####设置部署环境（这里使用的是go-ipfs）<br>下载地址：<a href="https://dist.ipfs.io/#go-ipfs，若你没有vpn，打不开ipfs官网的话，可以到github上下载编译好的文件。（[go-ipfs](https://github.com/ipfs/go-ipfs/releases)）" target="_blank" rel="noopener">https://dist.ipfs.io/#go-ipfs，若你没有vpn，打不开ipfs官网的话，可以到github上下载编译好的文件。（[go-ipfs](https://github.com/ipfs/go-ipfs/releases)）</a><br><img src="https://upload-images.jianshu.io/upload_images/764896-c14657567d17308c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ipfs下载.png"><br>打开终端，进行解压缩和安装操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">liyuechun:Downloads yuechunli$ pwd</span><br><span class="line">/Users/liyuechun/Downloads</span><br><span class="line">liyuechun:Downloads yuechunli$ ls</span><br><span class="line">go-ipfs_v0.4.10_darwin-amd64.tar.gz</span><br><span class="line">liyuechun:Downloads yuechunli$ tar xvfz go-ipfs_v0.4.10_darwin-amd64.tar.gz</span><br><span class="line">x go-ipfs/build-log</span><br><span class="line">x go-ipfs/install.sh</span><br><span class="line">x go-ipfs/ipfs</span><br><span class="line">x go-ipfs/LICENSE</span><br><span class="line">x go-ipfs/README.md</span><br><span class="line">liyuechun:Downloads yuechunli$ ls</span><br><span class="line">go-ipfs					go-ipfs_v0.4.10_darwin-amd64.tar.gz</span><br><span class="line">liyuechun:Downloads yuechunli$ cd go-ipfs</span><br><span class="line">liyuechun:go-ipfs yuechunli$ ls</span><br><span class="line">LICENSE		README.md	build-log	install.sh	ipfs</span><br><span class="line">liyuechun:go-ipfs yuechunli$ mv ipfs /usr/local/bin/ipfs</span><br></pre></td></tr></table></figure></p>
<p>tar xvfz go-ipfs_v0.4.10_darwin-amd64.tar.gz文件解压。</p>
<p>mv ipfs /usr/local/bin/ipfs，将已解压的文件夹中的ipfs文件移动到/usr/local/bin/文件夹中。</p>
<p>####创建ipfs节点<br>为了运行项目，我们需要通过ipfs init在本地计算机建立一个IPFS节点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">localhost:.ipfs yuechunli$ cd ~/.ipfs</span><br><span class="line">-bash: cd: /Users/liyuechun/.ipfs: No such file or directory</span><br><span class="line">localhost:.ipfs yuechunli$ ipfs init</span><br><span class="line">initializing IPFS node at /Users/liyuechun/.ipfs</span><br><span class="line">generating 2048-bit RSA keypair...done</span><br><span class="line">peer identity: QmdKXkeEWcuRw9oqBwopKUa8CgK1iBktPGYaMoJ4UNt1MP</span><br><span class="line">to get started, enter:</span><br><span class="line"></span><br><span class="line">	ipfs cat /ipfs/QmVLDAhCY3X9P2uRudKAryuQFPM5zqA3Yij1dY8FpGbL7T/readme</span><br><span class="line"></span><br><span class="line">localhost:.ipfs yuechunli$ cd ~/.ipfs</span><br><span class="line">localhost:.ipfs yuechunli$ ls</span><br><span class="line">blocks		datastore	version</span><br><span class="line">config		keystore</span><br><span class="line">localhost:.ipfs yuechunli$ open ./</span><br><span class="line">localhost:.ipfs yuechunli$</span><br></pre></td></tr></table></figure></p>
<p> <img src="https://upload-images.jianshu.io/upload_images/764896-efadb955189a7185.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="WX20171120-202547@2x (1).png"><br>执行完ipfs init命令后，会在根目录生成一个.ipfs的文件夹存储节点数据。.ipfs节点默认存储空间为10个G。</p>
<p>如果你自己想修改节点默认存储空间，可打开终端执行下面的命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">localhost:.ipfs yuechunli$ export EDITOR=/usr/bin/vim</span><br><span class="line">localhost:.ipfs yuechunli$ ipfs config edit</span><br></pre></td></tr></table></figure></p>
<p>执行完ipfs config edit命令后会打开一个文件，在这个文件中找到下图中绘制红线的位置，将10GB修改成你自己想要的存储空间。修改完毕，保存退出。（PS：输入i可以开始编辑，编译完毕后按esc键，再输入:，再次输入wq保存并且退出）。<br><img src="https://upload-images.jianshu.io/upload_images/764896-8264598b7aed3969.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="WX20171120-203320@2x.png"></p>
<p>####查看节点id<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">localhost:.ipfs yuechunli$ ipfs id</span><br><span class="line">&#123;</span><br><span class="line">	&quot;ID&quot;: &quot;QmdKXkeEWcuRw9oqBwopKUa8CgK1iBktPGYaMoJ4UNt1MP&quot;,</span><br><span class="line">	&quot;PublicKey&quot;: &quot;CAASpgIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDqJlLivZerwIYTI5K8pEzbRnmNti3rObvpa17AixKpgTPnWAvPmZr1SLBzYUjpy3coymLHkNldcEZixnWTIihKIF1pVhxJG2MzFg8vHnG7uF8vxyYE4wOZ6V4rTauYbGau1Tj/TSjzI9oKOoezitTn6ggD3p2Y6Y1/FWGRfAvG7UUBFXSMtwVkwM/F0aaP2k8vHgsZDeYLY8UCpq67dC+AgbVNieLrX/tht6D7iTYS5Ch5dMIpwxMdRLkrNx8k9CVFgvnILhdTJL4QfdNA4L5FnWJy3axhj6bRdVkBpcdgn2WAHxYW6FwkB/eFSKxwNCKsO2/C52mUNNMouN2XlObTAgMBAAE=&quot;,</span><br><span class="line">	&quot;Addresses&quot;: null,</span><br><span class="line">	&quot;AgentVersion&quot;: &quot;go-ipfs/0.4.10/&quot;,</span><br><span class="line">	&quot;ProtocolVersion&quot;: &quot;ipfs/0.1.0&quot;</span><br><span class="line">&#125;</span><br><span class="line">localhost:.ipfs yuechunli$</span><br></pre></td></tr></table></figure></p>
<p>QmdKXkeEWcuRw9oqBwopKUa8CgK1iBktPGYaMoJ4UNt1MP为你的节点ID每个节点都会有一个唯一的ID。</p>
<p>####启动节点服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">localhost:.ipfs yuechunli$ ipfs daemon</span><br><span class="line">Initializing daemon...</span><br><span class="line">Adjusting current ulimit to 2048...</span><br><span class="line">Successfully raised file descriptor limit to 2048.</span><br><span class="line">Swarm listening on /ip4/111.196.241.208/tcp/7723</span><br><span class="line">Swarm listening on /ip4/127.0.0.1/tcp/4001</span><br><span class="line">Swarm listening on /ip4/192.168.0.107/tcp/4001</span><br><span class="line">Swarm listening on /ip6/::1/tcp/4001</span><br><span class="line">API server listening on /ip4/127.0.0.1/tcp/5001</span><br><span class="line">Gateway (readonly) server listening on /ip4/127.0.0.1/tcp/8080</span><br><span class="line">Daemon is ready</span><br></pre></td></tr></table></figure></p>
<p>####跨域资源共享CORS配置<br>为了后续的开发方便，我们还需要对跨域资源共享( CORS )进行配置，ctrl- c退出ipfs，然后按照下面的步骤进行跨域配置。</p>
<ul>
<li>ctrl- c退出ipfs</li>
<li>ipfs config –json API.HTTPHeaders.Access-Control-Allow-Methods ‘[“PUT”, “GET”, “POST”, “OPTIONS”]’</li>
<li>ipfs config –json API.HTTPHeaders.Access-Control-Allow-Origin ‘[“*”]’<br>####验证</li>
<li><p>启动服务器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ipfs daemon</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建终端执行下面的命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipfs cat /ipfs/QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG/readme</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">localhost:~ yuechunli$ ipfs cat /ipfs/QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG/readme</span><br><span class="line">Hello and Welcome to IPFS!</span><br><span class="line"></span><br><span class="line">██╗██████╗ ███████╗███████╗</span><br><span class="line">██║██╔══██╗██╔════╝██╔════╝</span><br><span class="line">██║██████╔╝█████╗  ███████╗</span><br><span class="line">██║██╔═══╝ ██╔══╝  ╚════██║</span><br><span class="line">██║██║     ██║     ███████║</span><br><span class="line">╚═╝╚═╝     ╚═╝     ╚══════╝</span><br><span class="line"></span><br><span class="line">If you&apos;re seeing this, you have successfully installed</span><br><span class="line">IPFS and are now interfacing with the ipfs merkledag!</span><br><span class="line"></span><br><span class="line"> -------------------------------------------------------</span><br><span class="line">| Warning:                                              |</span><br><span class="line">|   This is alpha software. Use at your own discretion! |</span><br><span class="line">|   Much is missing or lacking polish. There are bugs.  |</span><br><span class="line">|   Not yet secure. Read the security notes for more.   |</span><br><span class="line"> -------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Check out some of the other files in this directory:</span><br><span class="line"></span><br><span class="line">  ./about</span><br><span class="line">  ./help</span><br><span class="line">  ./quick-start     &lt;-- usage examples</span><br><span class="line">  ./readme          &lt;-- this file</span><br><span class="line">  ./security-notes</span><br><span class="line">localhost:~ yuechunli$</span><br></pre></td></tr></table></figure>
<ul>
<li>浏览器输入下面的网址<br>打开<a href="http://localhost:5001/webui" target="_blank" rel="noopener">http://localhost:5001/webui</a>会看到一个漂亮的<code>UI</code>界面。<br><img src="https://upload-images.jianshu.io/upload_images/764896-72391c309e14f96f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="WX20171120-205505@2x.png"></li>
</ul>
<p>###[注]：目前只有go语言的ipfs环境，其他的可以访问github上的<a href="https://github.com/ipfs/ipfs" target="_blank" rel="noopener">ipfs开源库</a>获取其他语言的进展情况。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###IPFS介绍&lt;br&gt;IPFS的英文全称是InterPlanetary File System，中文名叫星际文件系统。IPFS是一个分布式的存储系统，你可以将各式各样的文件存储到IPFS网络中。至于IPFS与HTTP之间的比较，本文不在此说明，大家可以到百度上搜索，这里
    
    </summary>
    
      <category term="ipfs" scheme="https://mrmessy77.github.io/categories/ipfs/"/>
    
    
      <category term="ipfs" scheme="https://mrmessy77.github.io/tags/ipfs/"/>
    
  </entry>
  
  <entry>
    <title>RxSwift</title>
    <link href="https://mrmessy77.github.io/2017/08/31/RxSwift/"/>
    <id>https://mrmessy77.github.io/2017/08/31/RxSwift/</id>
    <published>2017-08-31T06:56:06.000Z</published>
    <updated>2017-09-15T08:27:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/764896-20717cba5469eee8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="6f742fc36fafa406a10567e5e08d47fb.jpg"></p>
<p>最近在研究RxSwift，希望从中收获一些有用的东西，在后期的编程中能进行更好的构架和编码。</p>
<p>这篇文章使用<strong><a href="https://github.com/ReactiveX/RxSwift" target="_blank" rel="noopener">RxSwift</a></strong>和<strong><a href="https://github.com/CoderMJLee/MJRefresh" target="_blank" rel="noopener">MJRefresh</a></strong>相结合来实现简单下拉和上拉的刷新。<br>为了利用更少的代码量展示更多的东西，我使用了RxDataSources，一个基于RxSwift的第三方库。<strong><a href="https://github.com/RxSwiftCommunity/RxDataSources" target="_blank" rel="noopener">RxDataSources</a></strong>是一个对tableview，collectionview中的datasource进行封装的库，使datasource能够进行和RxSwift一样的响应式编程，与RxSwift能够完美的结合。</p>
<p>不多说了，直接上代码：<br>首先，我使用RxDataSources实现了一个简单的列表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">import UIKit</span><br><span class="line">import RxSwift</span><br><span class="line">import RxCocoa</span><br><span class="line">import RxDataSources</span><br><span class="line"></span><br><span class="line">class NewsViewModel: BaseViewModel, UITableViewDelegate &#123;</span><br><span class="line"></span><br><span class="line">/** 释放资源属性 */</span><br><span class="line">let disposeBag = DisposeBag()</span><br><span class="line">/** 资源类属性 */</span><br><span class="line">let dataSource = RxTableViewSectionedReloadDataSource&lt;SectionModel&lt;String,NewsModel&gt;&gt;()</span><br><span class="line">/** 新闻数据 */</span><br><span class="line">var news = [NewsModel]()</span><br><span class="line">var tableView: UITableView!</span><br><span class="line"></span><br><span class="line">//MARK: - 配置基础设置</span><br><span class="line"></span><br><span class="line">func prepare(tableView: UITableView) &#123;</span><br><span class="line">self.tableView = tableView</span><br><span class="line">//设置tableView的delegate</span><br><span class="line">tableView.rx_setDelegate(self).addDisposableTo(disposeBag)</span><br><span class="line"></span><br><span class="line">dataSource.configureCell = &#123;dataSource,tableView,indexPath,new in</span><br><span class="line">let cell = tableView.dequeueReusableCellWithIdentifier(&quot;NewsCell&quot;, forIndexPath: indexPath) as! NewsCell</span><br><span class="line">cell.config(new.dec, date: new.date)</span><br><span class="line">return cell</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建数据</span><br><span class="line">for _ in 0..&lt;9 &#123;</span><br><span class="line">let new = NewsModel(pic: &quot;&quot;, dec: &quot;LOL测试服：狼人皮肤调整 酒桶被动增强&quot;, date: &quot;2016-07-01&quot;)</span><br><span class="line">news.append(new)</span><br><span class="line">&#125;</span><br><span class="line">let sections = [</span><br><span class="line">SectionModel(model: &quot;&quot;, items: news)</span><br><span class="line">]</span><br><span class="line">//订阅被观察者</span><br><span class="line">let items = Observable.just(sections)</span><br><span class="line">items.bindTo(tableView.rx_itemsWithDataSource(dataSource)).addDisposableTo(disposeBag)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//MARK: - UITableViewDelegate</span><br><span class="line"></span><br><span class="line">func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -&gt; CGFloat &#123;</span><br><span class="line">return 94</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>效果图：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/764896-b65fdb8080e1c5de.gif?imageMogr2/auto-orient/strip" alt="rxswiftrefresh1.gif"></p>
<p>接下来，我们将使用MJRefresh进行下拉和上拉的刷新，因为考虑后期的维护，我将MJRefresh进行了近一步的封装，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import UIKit</span><br><span class="line">import MJRefresh</span><br><span class="line"></span><br><span class="line">//MARK; - 自定义下拉刷新控件</span><br><span class="line">class CustomRefreshHeader: MJRefreshNormalHeader &#123;</span><br><span class="line"></span><br><span class="line">override func prepare() &#123;</span><br><span class="line">super.prepare()</span><br><span class="line">self.stateLabel?.font = UIFont.systemFontOfSize(14.0)</span><br><span class="line">self.stateLabel?.textColor = color_999999</span><br><span class="line">self.lastUpdatedTimeLabel.font = UIFont.systemFontOfSize(14.0)</span><br><span class="line">self.lastUpdatedTimeLabel?.textColor = color_999999</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//MARK; - 自定义上拉刷新控件</span><br><span class="line">class CustomRefreshFooter: MJRefreshAutoNormalFooter &#123;</span><br><span class="line"></span><br><span class="line">override func prepare() &#123;</span><br><span class="line">super.prepare()</span><br><span class="line">self.setTitle(&quot;正在获取数据中...&quot;, forState: MJRefreshState.Refreshing)</span><br><span class="line">self.setTitle(&quot;加载更多&quot;, forState: MJRefreshState.Idle)</span><br><span class="line">self.setTitle(&quot;没有更多&quot;, forState: MJRefreshState.NoMoreData)</span><br><span class="line">self.stateLabel?.font = UIFont.systemFontOfSize(14.0)</span><br><span class="line">self.stateLabel?.textColor = color_999999</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//MARK: - 隐藏footer</span><br><span class="line">func hideFooter() &#123;</span><br><span class="line">self.stateLabel?.hidden = true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//MARK: - 显示footer</span><br><span class="line">func showFooter() &#123;</span><br><span class="line">self.stateLabel?.hidden = false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">override func placeSubviews() &#123;</span><br><span class="line">super.placeSubviews()</span><br><span class="line">let loadingView = self.subviews[1] as! UIActivityIndicatorView</span><br><span class="line">//圈圈</span><br><span class="line">var arrowCenterX = self.mj_w * 0.5</span><br><span class="line">if !self.refreshingTitleHidden &#123;</span><br><span class="line">arrowCenterX -= 80</span><br><span class="line">&#125;</span><br><span class="line">let arrowCenterY = self.mj_h * 0.5</span><br><span class="line">loadingView.center = CGPoint(x: arrowCenterX, y: arrowCenterY)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在RxSwiftRefreshDemo中我们能找到RefreshManager这个类，也就是我对MJRefresh近一步封装的类。</p>
<p>接着将MJRefresh添加到tableview上，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class BaseTableView: UIView &#123;</span><br><span class="line"></span><br><span class="line">var tableView: UITableView!</span><br><span class="line">var header: CustomRefreshHeader! //下拉刷新视图</span><br><span class="line">var footer: CustomRefreshFooter! //上拉刷新视图</span><br><span class="line"></span><br><span class="line">override init(frame: CGRect) &#123;</span><br><span class="line">super.init(frame: frame)</span><br><span class="line"></span><br><span class="line">self.placeSubViews()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">required init?(coder aDecoder: NSCoder) &#123;</span><br><span class="line">fatalError(&quot;init(coder:) has not been implemented&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//MARK: - 放置子视图</span><br><span class="line"></span><br><span class="line">private func placeSubViews() &#123;</span><br><span class="line">tableView = UITableView()</span><br><span class="line">tableView.separatorStyle = .None</span><br><span class="line">tableView.backgroundColor = color_Clear</span><br><span class="line">tableView.tableFooterView = UIView()</span><br><span class="line">self.addSubview(tableView)</span><br><span class="line">tableView.mm_CenterEqual(self).mm_SizeEqual(self)</span><br><span class="line">//注册默认cell信息</span><br><span class="line">tableView.registerClass(BaseCell.self, forCellReuseIdentifier: &quot;BaseCell&quot;)</span><br><span class="line"></span><br><span class="line">header = CustomRefreshHeader()</span><br><span class="line">tableView.mj_header = header</span><br><span class="line"></span><br><span class="line">footer = CustomRefreshFooter()</span><br><span class="line">tableView.mj_footer = footer</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>考虑到这里是view层，我并没有设置header和footer的Action。接下来我在NewsViewModel进行MJRefresh的设置。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">class NewsViewModel: BaseViewModel, UITableViewDelegate &#123;</span><br><span class="line"></span><br><span class="line">/** 释放资源属性 */</span><br><span class="line">let disposeBag = DisposeBag()</span><br><span class="line">/** 资源类属性 */</span><br><span class="line">let dataSource = RxTableViewSectionedReloadDataSource&lt;SectionModel&lt;String,NewsModel&gt;&gt;()</span><br><span class="line">/** 新闻数据 */</span><br><span class="line">var news = [NewsModel]()</span><br><span class="line">var tableView: UITableView!</span><br><span class="line"></span><br><span class="line">//MARK: - 配置基础设置</span><br><span class="line"></span><br><span class="line">func prepare(tableView: UITableView) &#123;</span><br><span class="line">self.tableView = tableView</span><br><span class="line">//设置tableView的delegate</span><br><span class="line">tableView.rx_setDelegate(self).addDisposableTo(disposeBag)</span><br><span class="line">tableView.mj_header.setRefreshingTarget(self, refreshingAction: #selector(refreshPageOneData))</span><br><span class="line">tableView.mj_footer.setRefreshingTarget(self, refreshingAction: #selector(refreshNextPageData))</span><br><span class="line"></span><br><span class="line">dataSource.configureCell = &#123;dataSource,tableView,indexPath,new in</span><br><span class="line">let cell = tableView.dequeueReusableCellWithIdentifier(&quot;NewsCell&quot;, forIndexPath: indexPath) as! NewsCell</span><br><span class="line">cell.config(new.dec, date: new.date)</span><br><span class="line">return cell</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//MARK: - UITableViewDelegate</span><br><span class="line"></span><br><span class="line">func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -&gt; CGFloat &#123;</span><br><span class="line">return 94</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//MARK: - 刷新第一页数据</span><br><span class="line"></span><br><span class="line">func refreshPageOneData() &#123;</span><br><span class="line">self.news.removeAll()</span><br><span class="line">for _ in 0..&lt;9 &#123;</span><br><span class="line">let new = NewsModel(pic: &quot;&quot;, dec: &quot;LOL测试服：狼人皮肤调整 酒桶被动增强&quot;, date: &quot;2016-07-01&quot;)</span><br><span class="line">news.append(new)</span><br><span class="line">&#125;</span><br><span class="line">let sections = [</span><br><span class="line">SectionModel(model: &quot;&quot;, items: news)</span><br><span class="line">]</span><br><span class="line">let items = Observable.just(sections)</span><br><span class="line">items.bindTo(tableView.rx_itemsWithDataSource(dataSource)).addDisposableTo(disposeBag)</span><br><span class="line">tableView.mj_header.endRefreshing()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//MARK: - 刷新下一页数据</span><br><span class="line"></span><br><span class="line">func refreshNextPageData() &#123;</span><br><span class="line">for _ in 0..&lt;9 &#123;</span><br><span class="line">let new = NewsModel(pic: &quot;&quot;, dec: &quot;LPL老将Clearlove退役 信任“七号”上线&quot;, date: &quot;2016-07-02&quot;)</span><br><span class="line">news.append(new)</span><br><span class="line">&#125;</span><br><span class="line">let sections = [</span><br><span class="line">SectionModel(model: &quot;&quot;, items: news)</span><br><span class="line">]</span><br><span class="line">let items = Observable.just(sections)</span><br><span class="line">tableView.mj_footer.endRefreshing()</span><br><span class="line">items.bindTo(tableView.rx_itemsWithDataSource(dataSource)).addDisposableTo(disposeBag)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是在上拉到下一页的时候出现了奔溃，提示错误：ssertion failed: This is a feature to warn you that there is already a delegate (or data source) set somewhere previously. The action you are trying to perform will clear that delegate (data source) and that means that some of your features that depend on that delegate (data source) being set will likely stop working.<br>意思是我们在下拉的时候设置了datasource的代理，不能在对tableview进行设置，如果要这样操作，需将原来的datasource设置为nil。所以我在refreshPageOneData()和refreshNextPageData()中加入了tableView.dataSource = nil。</p>
<p>效果图如下：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/764896-b33cfb8e22609b01.gif?imageMogr2/auto-orient/strip" alt="rxswiftrefresh2.gif"></p>
<p>demo地址：<a href="https://github.com/MrMessy77/RxSwiftRefreshDemo" target="_blank" rel="noopener">RxSwiftRefreshDemo</a><br>此文章仅供参考。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/764896-20717cba5469eee8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; 
    
    </summary>
    
      <category term="swift" scheme="https://mrmessy77.github.io/categories/swift/"/>
    
    
      <category term="swift" scheme="https://mrmessy77.github.io/tags/swift/"/>
    
  </entry>
  
</feed>
